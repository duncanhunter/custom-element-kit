const t='\n[part="container"] {\n    display: flex;\n    align-items: center;\n    gap: 0;\n}\n\n[part="group"] {\n    display: flex;\n}\n\n[part="input"] {\n    width: 30px;\n    height: 40px;\n    font-size: 24px;\n    text-align: center;\n    border: 1px solid #ccc;\n    border-radius: 0;\n    -moz-appearance: textfield;\n    margin-left: -1px;\n}\n\n[part="input"]::-webkit-outer-spin-button,\n[part="input"]::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n}\n\n[part="input"]:first-child {\nborder-top-left-radius: 6px;\n    border-bottom-left-radius: 6px;\n    margin-left: 0;\n}\n\n[part="input"]:last-child {\n    border-top-right-radius: 6px;\n    border-bottom-right-radius: 6px;\n}\n\n[part="separator"] {\n    margin: 0 10px;\n    font-size: 20px;\n    color: #ccc;\n}\n\n[part="input"]:focus {\n    outline: none;\n    box-shadow: 0 0 0 2px #007BFF;\n    z-index: 1;\n}\n\n[part="input"].invalid {\n    border-color: red;\n}\n\n[part="error-message"] {\n    color: red;\n    font-size: 12px;\n    margin-top: 5px;\n    display: none;\n}\n\n[part="error-message"].visible {\n    display: block;\n}';class e extends HTMLElement{static get observedAttributes(){return["required","group-size","groups"]}static formAssociated=!0;#t;#e;#i;#s;#n;constructor(){super(),this.#t=this.attachInternals(),this.shadowRoot||(this.#s=this.attachShadow({mode:"open"})),this.#n=!1}get#r(){return this.#s.querySelectorAll('[part="input"]')}get value(){return Array.from(this.#r).map((t=>t.value)).join("")}set value(t){if("string"==typeof t){const e=t.replace(/\D/g,"").slice(0,this.#e*this.#i),i=this.#r;e.split("").forEach(((t,e)=>{i[e]&&(i[e].value=t)})),this.#a()}}get form(){return this.#t.form}get name(){return this.getAttribute("name")}checkValidity(){return this.#t.checkValidity()}reportValidity(){return this.#t.reportValidity()}connectedCallback(){this.#e=Number.parseInt(this.getAttribute("group-size"))||3,this.#i=Number.parseInt(this.getAttribute("groups"))||2,this.#o(),this.#u(),this.hasAttribute("required")&&this.#t.setValidity({valueMissing:!0},"Number is required"),this.form&&(this.form.addEventListener("submit",this.#p.bind(this)),this.form.addEventListener("reset",this.#l.bind(this)))}disconnectedCallback(){for(const[t,e]of this.#r.entries())e.removeEventListener("beforeinput",(t=>this.#h(t))),e.removeEventListener("input",(e=>this.#d(e,t))),e.removeEventListener("keydown",(e=>this.#c(e,t))),e.removeEventListener("paste",(e=>this.#g(e,t)))}attributeChangedCallback(t,e,i){if("required"===t){this.hasAttribute("required")&&!this.value?this.#t.setValidity({valueMissing:!0},"Number is required"):this.#t.setValidity({})}else"group-size"!==t&&"groups"!==t||(this.#e=Number.parseInt(this.getAttribute("group-size"))||3,this.#i=Number.parseInt(this.getAttribute("groups"))||2,this.#o(),this.#u())}#o(){let e="";for(let t=0;t<this.#i;t++)e+=`\n                        <div part="group">\n                            ${this.#m(this.#e)}\n                        </div>\n                        ${t<this.#i-1?'<div part="separator">-</div>':""}\n                    `;this.#s.innerHTML=`\n                    <style>${t}</style>\n                    <div part="container">\n                        ${e}\n                    </div>\n                    <div part="error-message"></div> \x3c!-- Error message element --\x3e\n                `,console.log(this.#s.innerHTML)}#u(){for(const[t,e]of this.#r.entries())e.addEventListener("beforeinput",(t=>this.#h(t))),e.addEventListener("input",(e=>this.#d(e,t))),e.addEventListener("keydown",(e=>this.#c(e,t))),e.addEventListener("paste",(e=>this.#g(e,t)))}#m(t){let e="";for(let i=0;i<t;i++)e+='<input type="number" part="input" maxlength="1" inputmode="numeric" pattern="[0-9]*" />';return e}#h(t){/^\d$/.test(t.data)||t.preventDefault()}#d(t,e){const i=t.target,s=i.value.replace(/\D/g,"");""===s?i.value="":(i.value=s.slice(-1),this.#r[e+1]?.focus()),this.#a()}#c(t,e){const i=t.target,s=()=>{t.preventDefault(),t.stopImmediatePropagation()};if("Backspace"===t.key)if(s(),""===i.value){const t=this.#r[e-1];t&&(t.value="",t.focus())}else i.value="",this.#a();else if("ArrowLeft"===t.key){const t=this.#r[e-1];t&&(s(),t.focus())}else if("ArrowRight"===t.key){const t=this.#r[e+1];t&&(s(),t.focus())}else"Enter"===t.key?this.form&&this.form.requestSubmit():"ArrowUp"===t.key?(s(),i.value=(+i.value+1)%10,this.#a()):"ArrowDown"===t.key&&(s(),i.value=(+i.value-1+10)%10,this.#a())}#g(t,e){t.preventDefault();const i=(t.clipboardData||window.clipboardData).getData("text").replace(/\D/g,"").slice(0,this.#e*this.#i),s=this.#r;i.split("").forEach(((t,i)=>{s[e+i]&&(s[e+i].value=t)})),this.#a();const n=this.#r[e+i.length];n&&n.focus()}#p(t){this.checkValidity()||(t.preventDefault(),t.stopPropagation()),this.#n=!0,this.#a()}#l(t){this.#n=!1,this.#a();for(const t of this.#r)t.value=""}#a(){const t=Array.from(this.#r).map((t=>t.value)).join("");this.#t.setFormValue(t);let e=!0,i="";this.hasAttribute("required")&&(t.length<this.#e*this.#i?(e=!1,i=this.getAttribute("data-missingvalue")||"Number is incomplete",this.#t.setValidity({valueMissing:!0},i)):this.#t.setValidity({})),!e&&this.#n?(this.#s.querySelector('[part="error-message"]').textContent=i,this.#s.querySelector('[part="error-message"]').classList.add("visible")):(this.#s.querySelector('[part="error-message"]').textContent="",this.#s.querySelector('[part="error-message"]').classList.remove("visible")),this.dispatchEvent(new Event("input",{bubbles:!0,composed:!0}))}}customElements.define("cek-digit-input",e);export{t as digitInputStyles};
