const e="\n:host {\n\tdisplay: flex;\n}";class t extends HTMLElement{static get observedAttributes(){return["name","size"]}constructor(){super(),this.shadowRoot||(this.attachShadow({mode:"open"}),this.shadowRoot.innerHTML=`<style>${e}</style>`)}connectedCallback(){this.#e||this.fetchIcon(this.name)}get#e(){return this.hasAttribute("server-rendered")}get name(){return this.getAttribute("name")}get size(){return this.getAttribute("size")||"1em"}async attributeChangedCallback(e,t,s){["size","name"].includes(e)&&t&&(this.#e||await this.fetchIcon(s))}async fetchIcon(e){this.removeAttribute("server-rendered");try{const t=window?.cekConfig?`${window?.cekConfig()?.iconPath}/${e}.svg`:`./icons/${e}.svg`,s=await fetch(t);this.dispatchEvent(new Event("cek-load"));const n=await s.text(),r=this.shadowRoot.querySelector("style");r?r.insertAdjacentHTML("afterend",n):this.shadowRoot.innerHTML=n;const i=this.shadowRoot.querySelector("svg");i.setAttribute("part","icon"),i.setAttribute("aria-hidden","true"),i.style.width=this.size,i.style.height=this.size}catch(e){console.error("fetchIcon: ",e),this.dispatchEvent(new CustomEvent("cek-error",{detail:{error:e}}))}}}customElements.define("cek-icon",t);export{t as Icon,e as iconStyles};
