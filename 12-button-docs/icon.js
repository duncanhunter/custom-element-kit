function e(e={}){const t=e.name||"",s=e.size||"24";return(icons[t]||"").replace("<svg",`<svg height="${s}" width="${s}" part="icon" aria-hidden="true"`).toString()}const t="\n:host {\n  display: flex;\n}\n";class s extends HTMLElement{static get observedAttributes(){return["name","size"]}constructor(){super(),this.shadowRoot||(this.attachShadow({mode:"open"}),this.#e||(this.shadowRoot.innerHTML=`<style>${t}</style>`))}connectedCallback(){this.#e||this.#t(this.name)}get#e(){return this.hasAttribute("server-rendered")}get name(){return this.getAttribute("name")}get size(){return this.getAttribute("size")||"1em"}attributeChangedCallback(e,t,s){["name","size"].includes(e)&&t&&!this.#e&&this.#t(this.name)}async#t(e){this.removeAttribute("server-rendered");const s=window?.cekConfig?`${window.cekConfig().iconPath}/${e}.svg`:`./icons/${e}.svg`;try{const e=await fetch(s);this.dispatchEvent(new Event("cek-load"));const r=await e.text(),n=this.shadowRoot.querySelector("style");n?n.insertAdjacentHTML("afterend",r):this.shadowRoot.innerHTML=`<style>${t}</style>${r}`;const i=this.shadowRoot.querySelector("svg");i&&(i.setAttribute("part","icon"),i.setAttribute("aria-hidden","true"),i.style.width=this.size,i.style.height=this.size)}catch(e){console.error("fetchIcon error:",e),this.dispatchEvent(new CustomEvent("cek-error",{detail:{error:e}}))}}}customElements.define("cek-icon",s);export{s as Icon,t as iconStyles,e as iconTemplate};
