const t='\n<fieldset>\n\t<legend>\n\t\t<label for="control" id="label" part="label"><slot name="label"></slot></label>\n\t\t<div id="help" part="help"><slot name="help"></slot></div>\n\t\t<div id="error" part="error"><slot name="error"></slot></div>\n\t\t</legend>\n\t<div part="container">\n\t\t<slot></slot>\n\t</div>\n</fieldset>\n',e='\n:host {\n\tdisplay: flex;\n\tflex-direction: column;\n\tfont-size: var(--cek-font-size-1);\n\tfont-family: var(--cek-font-family);\n\tcolor: var(--cek-text-color-0);\n}\n\nfieldset {\n\tborder: none;\n\tmargin: 0;\n\tpadding: 0;\n\tmin-inline-size: 0;\n\theight: auto;\n\tdisplay: contents;\n}\n\nlegend {\n\tmargin: 0;\n    padding: 0;\n}\n\n#control {\n  border: var(--cek-form-control-border);\n  border-radius: var(--cek-border-radius);\n  height: var(--cek-form-control-height-medium);\n  font-size: inherit;\n  color: inherit;\n}\n\n#control:focus {\n\toutline: var(--cek-focus-ring);\n\toutline-offset: var(--cek-focus-ring-offset);\n}\n\n#error {\n\tcolor: var(--cek-text-color-error);\n}\n\n:host([help]) #help,\n:host([error]) #error {\n\tmargin-block-start: var(--cek-space-2);\n}\n\n[part="container"] {\n  display: flex;\n  flex-direction: column;\n  margin-block: var(--cek-space-4);\n  gap: var(--cek-space-4);\n}\n\n:host([error])  #control {\n\tborder-color: var(--cek-border-color-error);\n}\t\n\n:host([error])  #control:focus {\n\toutline-color: var(--cek-border-color-error);\n}\n';class r extends HTMLElement{static formAssociated=!0;static get observedAttributes(){return["value","error","label","help","disabled","autofocus","required","name","min-selections","max-selections","exact-selections"]}#t;#e;#r;#i;#s;#n;constructor(){super(),this.pristine=!0,this.#t=this.attachInternals(),this.shadowRoot||(this.attachShadow({mode:"open"}),this.shadowRoot.innerHTML=`<style>${e}</style>${t}`),this.#e=this.shadowRoot.getElementById("error"),this.#r=this.shadowRoot.getElementById("label"),this.#i=this.shadowRoot.getElementById("help"),this.#s=this.shadowRoot.querySelector("fieldset"),this.#n=this.shadowRoot.querySelector("slot")}get value(){return this.checkedValues.join(",")}set value(t){for(const e of this.checkboxes){const r=t.split(",").includes(e.value);e.checked!==r&&(e.checked=r)}this.#t.setFormValue(this.value),this.#o()}get label(){return this.getAttribute("label")}set label(t){t?this.setAttribute("label",t):this.removeAttribute("label")}get help(){return this.getAttribute("help")}set help(t){t?this.setAttribute("help",t):this.removeAttribute("help")}get error(){return this.getAttribute("error")}set error(t){t?this.setAttribute("error",t):this.removeAttribute("error")}get form(){return this.#t.form}get name(){return this.getAttribute("name")}get type(){return this.localName}get validity(){return this.#t.validity}get validationMessage(){return this.#t.validationMessage}get willValidate(){return this.#t.willValidate}get validateOnChange(){return this.hasAttribute("validate-on-change")}set validateOnChange(t){t?this.setAttribute("validate-on-change",""):this.removeAttribute("validate-on-change")}get validateOnInputAfterSubmitted(){return this.hasAttribute("validate-on-input-after-submitted")}set validateOnInputAfterSubmitted(t){t?this.setAttribute("validate-on-input-after-submitted",""):this.removeAttribute("validate-on-input-after-submitted")}set formDisabled(t){this.#t.formDisabled=t}get checkedValues(){return Array.from(this.checkboxes).filter((t=>t.checked)).map((t=>t.getAttribute("value")||""))}get checkboxes(){return this.querySelectorAll("cek-checkbox")}get required(){return this.hasAttribute("required")}set required(t){t?this.setAttribute("required",""):this.removeAttribute("required")}get minSelections(){return Number.parseInt(this.getAttribute("min-selections"),10)||0}set minSelections(t){null!=t?this.setAttribute("min-selections",t):this.removeAttribute("min-selections")}get maxSelections(){const t=this.getAttribute("max-selections");return null!==t?Number.parseInt(t,10):Number.POSITIVE_INFINITY}set maxSelections(t){null!=t?this.setAttribute("max-selections",t):this.removeAttribute("max-selections")}get exactSelections(){const t=this.getAttribute("exact-selections");return null!==t?Number.parseInt(t,10):null}set exactSelections(t){null!=t?this.setAttribute("exact-selections",t):this.removeAttribute("exact-selections")}connectedCallback(){this.addEventListener("input",this.#l),this.addEventListener("change",this.#a),this.#n.addEventListener("slotchange",(t=>{this.#o()})),this.form&&this.form.addEventListener("submit",this.#h),this.hasAttribute("autofocus")&&this.focus(),this.error&&this.#t.setValidity({customError:!0},this.error)}disconnectedCallback(){this.removeEventListener("input",this.#l),this.removeEventListener("change",this.#a),this.#t.form&&this.#t.form.removeEventListener("submit",this.#h)}attributeChangedCallback(t,e,r){"value"===t&&this.value!==r&&this.#t.setFormValue(r),"error"===t&&r!==e&&(this.#e.textContent=r),"label"===t&&(this.#r.textContent=r),"help"===t&&(this.#i.textContent=r)}formDisabledCallback(t){t?this.#s.setAttribute("aria-disabled","true"):this.#s.removeAttribute("aria-disabled");for(const e of this.checkboxes)e.disabled=t}formResetCallback(){for(const t of this.checkboxes)t.checked=!1;this.#t.setFormValue(""),this.#t.setValidity({}),this.error=""}reportValidity(){return this.#o({showError:!0})}focus(){this.checkboxes[0]?.focus()}checkValidity(){this.#o()}#o=({showError:t=!1}={})=>{const e=this.checkedValues.length;this.error="";const r=(e,r)=>(this.#t.setValidity(e,r),t&&(this.error=r),!1);return null!==this.exactSelections&&e!==this.exactSelections?r({customError:!0},`Select exactly ${this.exactSelections} options.`):e<this.minSelections?r({rangeUnderflow:!0},`Select at least ${this.minSelections} options.`):e>this.maxSelections?r({rangeOverflow:!0},`Select no more than ${this.maxSelections} options.`):this.required&&0===e?r({valueMissing:!0},"Select at least one option."):(this.#t.setValidity({}),!0)};#l=t=>{t.target.matches("cek-checkbox")&&this.#t.form?.validateOnInputAfterSubmit&&this.#t.form.submitted&&(t.preventDefault(),t.stopPropagation(),this.pristine=!1,this.#o({showError:!0}))};#a=t=>{t.target.matches("cek-checkbox")&&this.validateOnChange&&(t.preventDefault(),t.stopPropagation(),this.pristine=!1,this.#t.setFormValue(this.value),this.#o({showError:!0}))};#h=t=>{if(this.#o({showError:!0}),this.error){t.preventDefault();for(const t of this.#t.form.elements)if(!t.validity.valid){t===this&&(this.#t.form.submitted=!0,t.focus());break}}}}customElements.define("cek-checkbox-group",r);export{r as CheckboxGroup,e as checkboxGroupStyles,t as checkboxGroupTemplate};
