const t=["required","type","disabled","inputmode","placeholder","min","max","minlength","maxlength","pattern","step","autocomplete","autofocus","title","spellcheck","input-aria-label","value"],e=(e={})=>{const n=t.filter((t=>void 0!==e[t])).map((t=>`${"input-aria-label"===t?"aria-label":t}="${e[t]}"`)).join(" ");return`\n\t\t<label for="input" id="label" part="label">\n\t\t\t<slot name="label">${e.label??""}</slot>\n\t\t</label>\n\t\t<div id="help" part="help">\n\t\t\t<slot name="help">${e.help??""}</slot>\n\t\t</div>\n\t\t<div id="error" part="error">\n\t\t\t<slot name="error">${e.error??""}</slot>\n\t\t</div>\n\t\t<div id="container" part="container">\n\t\t\t<slot name="start"></slot>\n\t\t\t<input part="input" id="input" ${n} aria-describedby="help error">\n\t\t\t<slot name="end"></slot>\n\t\t</div>\n\t\t`},n='\n:host {\n\tdisplay: block;\n\tfont-family: var(--cek-font-family);\n}\n\n#container {\n\tdisplay: flex;\n\talign-items: stretch;\n\tborder: var(--cek-form-control-border);\n\tborder-radius: var(--cek-border-radius);\n\tbox-sizing: border-box;\n}\n\n#container:has(#input:focus) {\n\toutline: var(--cek-focus-ring);\n\toutline-offset: var(--cek-focus-ring-offset);\n}\n\n#input {\n\tborder: none;\n\tpadding: 0;\n\toutline: none;\n\tflex: 1;\n\tfont-size: inherit;\n\tfont-family: inherit;\n\tcolor: inherit;\n\tmargin-inline: var(--cek-space-2);\n\tbackground-color: var(--cek-surface-color-0);\n}\n\n:host([size="small"]) #container {\n\tmin-height: var(--cek-height-small);\n}\n\n:host([label][size="small"]) #label,\n:host([help][size="small"]) #help,\n:host([error][size="small"]) #error,\n:host([size="small"]) #input::placeholder {\n\tfont-size: var(--cek-font-size-0);\n}\n\n:host(:not([size])) #container,\n:host([size="medium"]) #container {\n\tmin-height: var(--cek-height-medium);\n}\n\n:host([label][size="medium"]) #label,\n:host([help][size="medium"]) #help,\n:host([error][size="medium"]) #error,\n:host([size="medium"]) #input::placeholder {\n\tfont-size: var(--cek-font-size-1);\n}\n\n:host([size="large"]) #container {\n\tmin-height: var(--cek-height-large);\n}\n\n:host([label][size="large"]) #label,\n:host([help][size="large"]) #help,\n:host([error][size="large"]) #error,\n:host([size="large"]) #input::placeholder {\n\tfont-size: var(--cek-font-size-2);\n}\n\n#help {\n\tcolor: var(--cek-text-color-3);\n}\n\n#error {\n\tcolor: var(--cek-text-color-error);\n}\n  \n:host([label]) #label,\n:host([help]) #help,\n:host([error]) #error {\n\tdisplay: block;\n\tmargin-block-end: var(--cek-space-2);\n}\n\n:host([error]) #container {\n\tborder-color: var(--cek-border-color-error);\n}\n  \n:host([error]) #container:has(#input:focus) {\n\toutline-color: var(--cek-border-color-error);\n}\n\n[name="start"]::slotted(cek-icon),\n[name="end"]::slotted(cek-icon) {\n\tmargin: var(--cek-space-2);\n\talign-self: center;\n}\n[name="start"]::slotted(cek-button),\n[name="end"]::slotted(cek-button) {\n\tmargin: var(--cek-space-3);\n\talign-self: center;\n}\n\n[name="start"]::slotted(kbd), [name="end"]::slotted(kbd) {\n\tpadding: var(--cek-space-1) var(--cek-space-2);\n\tmargin: var(--cek-space-2);\n\tborder: var(--cek-border);\n\tborder-radius: var(--cek-border-radius);\n\tcolor: var(--cek-text-color-2);\n\talign-self: center;\n}\n';class i extends HTMLElement{static get observedAttributes(){return["label","help","error",...t]}static formAssociated=!0;#t=null;constructor(){super(),this.#t=this.attachInternals(),this.shadowRoot||(this.attachShadow({mode:"open",delegatesFocus:!0}),this.shadowRoot.innerHTML=`<style>${n}</style>${e(this.#e)}`)}get value(){return this.#n.value}set value(t){this.#n.value!==t&&(this.#n.value=t),this.#t.setFormValue(t)}get type(){return this.#n.type}set type(t){this.#n.type!==t&&(this.#n.type=t),this.setAttribute("type",t)}get name(){return this.getAttribute("name")}get validity(){return this.#n.validity}get validationMessage(){return this.#t.validationMessage}get#n(){return this.shadowRoot.getElementById("input")}get#e(){const t={};for(const{name:e,value:n}of this.attributes)t[e]=n;return t}connectedCallback(){this.#n.addEventListener("input",this.#i),this.#n.addEventListener("change",this.#r),this.addEventListener("command",this.#s)}disconnectedCallback(){this.#n.removeEventListener("input",this.#i),this.#n.removeEventListener("change",this.#r),this.#t.form?.removeEventListener("submit",this.#o),this.#n.removeEventListener("keyup",this.#a),this.removeEventListener("command",this.#s)}formAssociatedCallback(t){t&&(t.addEventListener("submit",this.#o),this.#n.addEventListener("keyup",this.#a))}formDisabledCallback(t){t?this.setAttribute("disabled",""):this.removeAttribute("disabled")}formResetCallback(){this.value=this.getAttribute("value")||"",this.removeAttribute("error"),this.#t.form.removeAttribute("submitted"),this.#t.setFormValue(""),this.#t.setValidity({})}attributeChangedCallback(e,n,i){t.includes(e)&&this.#l(),["label","help","error"].includes(e)&&(this.shadowRoot.getElementById(e).textContent=i)}focus(){this.#n.focus()}togglePassword(){this.type="password"===this.type?"text":"password"}clear(){this.value=""}#l(){for(const e of t){const t="input-aria-label"===e?"aria-label":e;this.hasAttribute(e)?this.#n.setAttribute(t,this.getAttribute(e)):"type"===e?this.#n.type="text":"autocomplete"===e?this.#n.setAttribute("autocomplete","off"):this.#n.removeAttribute(t)}}#i=t=>{this.value=this.#n.value,this.#h(),this.dispatchEvent(new t.constructor(t.type,t))};#r=t=>{this.hasAttribute("validate-on-change")&&(this.#h(!0),this.dispatchEvent(new t.constructor(t.type,t)))};#o=t=>{this.#t.form.setAttribute("submitted",""),this.#h()||(t.preventDefault(),this.#t.form.querySelector(":invalid")===this&&this.#n.focus())};#a=t=>{"Enter"===t.key&&(t.preventDefault(),this.#t.form.requestSubmit())};#s=t=>{const e=t.command.replace(/(-\w)/g,(t=>t[1].toUpperCase()));e in this&&this[e](t)};#h(t=!1){this.#t.setValidity({}),this.removeAttribute("error");for(const e of["valueMissing","tooShort","tooLong","typeMismatch","rangeUnderflow","rangeOverflow","patternMismatch"])if(this.#n.validity[e]){const n=this.getAttribute(`${e.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase()}-message`)||e.replace(/([A-Z])/g," $1").replace(/^\w/,(t=>t.toUpperCase()));return this.#t.setValidity({[e]:!0},n,this.#n),(this.#t.form?.hasAttribute("submitted")||t||this.hasAttribute("error"))&&this.setAttribute("error",n),!1}return!0}}customElements.define("cek-input",i);export{n as inputStyles,e as inputTemplate};
