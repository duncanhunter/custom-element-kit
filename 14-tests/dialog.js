const t=["open","role"],e=(e={})=>`\n\t\t<dialog id="dialog" part="dialog" ${t.filter((t=>void 0!==e[t]&&!(e.modal&&e.open))).map((t=>`${t}="${e[t]}"`)).join(" ")} aria-modal="${e.modal?"true":"false"}">\n\t\t  \t<div id="container" part="container">\n\t\t\t\t<header part="header" id="header">\n\t\t\t\t\t<slot name="header"></slot>\n\t\t\t\t</header>\n\t\t\t\t<div id="content" part="content">\n\t\t\t\t\t<slot></slot>\n\t\t\t\t</div>\n\t\t\t\t<footer part="footer">\n\t\t\t\t\t<slot name="footer"></slot>\n\t\t\t\t</footer>\n\t\t\t</div>\n\t\t</dialog>\n\t`,o='\ndialog {\n\tz-index: 1;\n\tborder-radius: var(--cek-border-radius-3);\n\tbox-shadow: var(--cek-shadow-3);\n\tbackground-color: light-dark(var(--cek-surface-color-0), var(--cek-surface-color-1));\n\tborder: none;\n\tmargin-block: var(--cek-space-8);\n    box-sizing: border-box;\n\tpadding: 0;\n\tmin-height: 18rem;\n}\n\n:host([open]) dialog {\n\tdisplay: flex;\n\tmargin: auto;\n}\n\ndialog[open] #container {\n\tdisplay: flex;\n\tflex-direction: column;\n\tflex-grow: 1;\n\tmargin: var(--cek-space-7);\n}\n\ndialog::backdrop {\n\tbackground-color: rgba(0, 0, 0, 0.8);\n}\n\nheader, footer {\n\tposition: sticky;\n\ttop: 0;\n\tbackground-color: inherit;\n\tz-index: 2;\n}\n\nheader {\n\tmargin-block-end: var(--cek-space-6);\n}\n\nfooter {\n\tmargin-block-start: var(--cek-space-6);\n\tbottom: 0;\n}\n\n#content {\n\toverflow-y: auto;\n\tflex-grow: 1;\n}\n\n:host([size="small"]) dialog {\n\twidth: 18.75rem;\n}\n\n:host(:not([size])) dialog,\n:host([size="medium"]) dialog {\n\twidth: 37.5rem;\n}\n\n:host([size="large"]) dialog {\n\twidth: 56.25rem;\n}\n';class n extends HTMLElement{static get observedAttributes(){return["open","role"]}constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.innerHTML=`<style>${o}</style>${e(this.#t)}`}get#e(){return this.shadowRoot.getElementById("dialog")}get#t(){let t="";for(const{name:e,value:o}of this.attributes)t+=` ${e}="${o}"`;return t}connectedCallback(){this.addEventListener("command",this.#o),this.#e.addEventListener("close",this.close),this.#e.addEventListener("click",this.#n),this.#e.addEventListener("keydown",this.#i.bind(this)),this.#s()}disconnectedCallback(){this.removeEventListener("command",this.#o),this.#e.removeEventListener("close",this.close),this.#e.removeEventListener("click",this.#n),this.#e.removeEventListener("keydown",this.#i.bind(this))}attributeChangedCallback(t,e,o){"open"===t&&(null===o&&this.#e.hasAttribute("open")?this.close():this.#s())}show(){this.#e.show(),this.#a(),this.setAttribute("open",""),this.#e.setAttribute("aria-modal","false")}showModal(){this.#e.showModal(),this.#a(),this.setAttribute("open",""),this.setAttribute("modal",""),this.#e.setAttribute("aria-modal","true")}close=(t="cancel")=>{this.#e.close(t),this.removeAttribute("open"),this.removeAttribute("modal"),this.dispatchEvent(new CustomEvent("close",{bubbles:!0,composed:!0}))};#s(){this.hasAttribute("open")&&!this.#e.hasAttribute("open")&&(this.hasAttribute("modal")?this.showModal():this.show())}#a(){requestAnimationFrame((()=>{const t=this.querySelector("[autofocus]");t?.tagName.toLowerCase().startsWith("cek-")&&t.focus()}))}#n=t=>{this.hasAttribute("close-on-outside-click")&&t.target===this.#e&&this.close()};#i(t){this.hasAttribute("no-esc-close")&&"Escape"===t.key&&(console.log("onEsc",{event:t}),t.preventDefault(),t.stopImmediatePropagation())}#o=t=>{const e=t.command.replace(/(-\w)/g,(t=>t[1].toUpperCase()));e in this&&this[e](t)}}customElements.define("cek-dialog",n);export{o as dialogStyles,e as dialogTemplate};
